/*
* Generated file
*
* Generated from: yang module name: config-logging yang module local name: logback
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat Aug 08 09:38:26 CST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.logback.config;
/**
* Actual state of logback configuration.
*/
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2013-07-16", name = "config-logging", namespace = "urn:opendaylight:params:xml:ns:yang:controller:logback:config")

@org.opendaylight.controller.config.api.annotations.Description(value="Actual state of logback configuration.")
public abstract class AbstractLogbackModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.logback.config.LogbackModuleMXBean,org.opendaylight.controller.config.api.RuntimeBeanRegistratorAwareModule {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.logback.config.AbstractLogbackModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute consoleAppendersJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("ConsoleAppenderTO");
    private java.util.List<org.opendaylight.controller.config.yang.logback.config.ConsoleAppenderTO> consoleAppenders = new java.util.ArrayList<org.opendaylight.controller.config.yang.logback.config.ConsoleAppenderTO>();

    public static final org.opendaylight.controller.config.api.JmxAttribute fileAppendersJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("FileAppenderTO");
    private java.util.List<org.opendaylight.controller.config.yang.logback.config.FileAppenderTO> fileAppenders = new java.util.ArrayList<org.opendaylight.controller.config.yang.logback.config.FileAppenderTO>();

    public static final org.opendaylight.controller.config.api.JmxAttribute loggersJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("LoggerTO");
    private java.util.List<org.opendaylight.controller.config.yang.logback.config.LoggerTO> loggers = new java.util.ArrayList<org.opendaylight.controller.config.yang.logback.config.LoggerTO>();

    public static final org.opendaylight.controller.config.api.JmxAttribute rollingAppendersJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("RollingFileAppenderTO");
    private java.util.List<org.opendaylight.controller.config.yang.logback.config.RollingFileAppenderTO> rollingAppenders = new java.util.ArrayList<org.opendaylight.controller.config.yang.logback.config.RollingFileAppenderTO>();

    //attributes end

    private final AbstractLogbackModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractLogbackModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractLogbackModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractLogbackModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    private org.opendaylight.controller.config.yang.logback.config.LogbackRuntimeRegistrator rootRuntimeBeanRegistratorWrapper;

    public org.opendaylight.controller.config.yang.logback.config.LogbackRuntimeRegistrator getRootRuntimeBeanRegistratorWrapper(){
        return rootRuntimeBeanRegistratorWrapper;
    }

    @Override
    public void setRuntimeBeanRegistrator(org.opendaylight.controller.config.api.runtime.RootRuntimeBeanRegistrator rootRuntimeRegistrator){
        this.rootRuntimeBeanRegistratorWrapper = new org.opendaylight.controller.config.yang.logback.config.LogbackRuntimeRegistrator(rootRuntimeRegistrator);
    }

    @Override
    public void validate() {

        customValidation();
    }

    protected void customValidation() {
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            if (consoleAppenders!=null){
                for(org.opendaylight.controller.config.yang.logback.config.ConsoleAppenderTO candidate : consoleAppenders) {
                    candidate.injectDependencyResolver(dependencyResolver);
                }
            }
            if (fileAppenders!=null){
                for(org.opendaylight.controller.config.yang.logback.config.FileAppenderTO candidate : fileAppenders) {
                    candidate.injectDependencyResolver(dependencyResolver);
                }
            }
            if (loggers!=null){
                for(org.opendaylight.controller.config.yang.logback.config.LoggerTO candidate : loggers) {
                    candidate.injectDependencyResolver(dependencyResolver);
                }
            }
            if (rollingAppenders!=null){
                for(org.opendaylight.controller.config.yang.logback.config.RollingFileAppenderTO candidate : rollingAppenders) {
                    candidate.injectDependencyResolver(dependencyResolver);
                }
            }
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractLogbackModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractLogbackModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (java.util.Objects.deepEquals(consoleAppenders, other.consoleAppenders) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(fileAppenders, other.fileAppenders) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(loggers, other.loggers) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(rollingAppenders, other.rollingAppenders) == false) {
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractLogbackModule that = (AbstractLogbackModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.util.List<org.opendaylight.controller.config.yang.logback.config.ConsoleAppenderTO> getConsoleAppenderTO() {
        return consoleAppenders;
    }

    @Override
    public void setConsoleAppenderTO(java.util.List<org.opendaylight.controller.config.yang.logback.config.ConsoleAppenderTO> consoleAppenders) {
        this.consoleAppenders = consoleAppenders;
    }

    @Override
    public java.util.List<org.opendaylight.controller.config.yang.logback.config.FileAppenderTO> getFileAppenderTO() {
        return fileAppenders;
    }

    @Override
    public void setFileAppenderTO(java.util.List<org.opendaylight.controller.config.yang.logback.config.FileAppenderTO> fileAppenders) {
        this.fileAppenders = fileAppenders;
    }

    @Override
    public java.util.List<org.opendaylight.controller.config.yang.logback.config.LoggerTO> getLoggerTO() {
        return loggers;
    }

    @Override
    public void setLoggerTO(java.util.List<org.opendaylight.controller.config.yang.logback.config.LoggerTO> loggers) {
        this.loggers = loggers;
    }

    @Override
    public java.util.List<org.opendaylight.controller.config.yang.logback.config.RollingFileAppenderTO> getRollingFileAppenderTO() {
        return rollingAppenders;
    }

    @Override
    public void setRollingFileAppenderTO(java.util.List<org.opendaylight.controller.config.yang.logback.config.RollingFileAppenderTO> rollingAppenders) {
        this.rollingAppenders = rollingAppenders;
    }

}
