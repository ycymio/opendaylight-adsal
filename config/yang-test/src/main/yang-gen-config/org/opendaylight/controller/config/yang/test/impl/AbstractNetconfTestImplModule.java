/*
* Generated file
*
* Generated from: yang module name: config-test-impl yang module local name: impl-netconf
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat Aug 08 09:41:27 CST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.test.impl;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2013-04-03", name = "config-test-impl", namespace = "urn:opendaylight:params:xml:ns:yang:controller:test:impl")

public abstract class AbstractNetconfTestImplModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.test.impl.NetconfTestImplModuleMXBean,org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface,org.opendaylight.controller.config.api.RuntimeBeanRegistratorAwareModule {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.test.impl.AbstractNetconfTestImplModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleLong2JmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleLong2");
    private java.lang.Long simpleLong2 = new java.lang.Long("445");

    public static final org.opendaylight.controller.config.api.JmxAttribute testingDepsJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("TestingDeps");
    private java.util.List<javax.management.ObjectName> testingDeps = new java.util.ArrayList<javax.management.ObjectName>(); // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute binaryLeafJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BinaryLeaf");
private byte[] binaryLeaf = new byte[] {100, 101, 102, 97, 117, 108, 116, 66, 105, 110};

    public static final org.opendaylight.controller.config.api.JmxAttribute complexListJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("ComplexList");
    private java.util.List<org.opendaylight.controller.config.yang.test.impl.ComplexList> complexList = new java.util.ArrayList<org.opendaylight.controller.config.yang.test.impl.ComplexList>();

    public static final org.opendaylight.controller.config.api.JmxAttribute extendedJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Extended");
    private org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendOnce extended = new org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendOnce(new java.lang.Integer("1"));

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleIntJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleInt");
    private java.lang.Long simpleInt;

    public static final org.opendaylight.controller.config.api.JmxAttribute extendedEnumJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("ExtendedEnum");
    private org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendEnum extendedEnum = org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendEnum.ONE;

    public static final org.opendaylight.controller.config.api.JmxAttribute typeJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Type");
    private java.lang.String type = "default-string";

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleListJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleList");
    private java.util.List<java.lang.Integer> simpleList = new java.util.ArrayList<java.lang.Integer>();

    public static final org.opendaylight.controller.config.api.JmxAttribute extendedTwiceJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("ExtendedTwice");
    private org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendTwice extendedTwice = new org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendTwice(new java.lang.Integer("2"));

    public static final org.opendaylight.controller.config.api.JmxAttribute sleepFactorJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SleepFactor");
    private java.math.BigDecimal sleepFactor = new java.math.BigDecimal("2.00");

    public static final org.opendaylight.controller.config.api.JmxAttribute dtoDJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DtoD");
    private org.opendaylight.controller.config.yang.test.impl.DtoD dtoD;

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleTestJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleTest");
    private java.lang.Integer simpleTest = new java.lang.Integer("99");

    public static final org.opendaylight.controller.config.api.JmxAttribute ipJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Ip");
    private org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress ip = new org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress("0:0:0:0:0:0:0:1".toCharArray());

    public static final org.opendaylight.controller.config.api.JmxAttribute unionTestAttrJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("UnionTestAttr");
    private org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.UnionTest unionTestAttr = new org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.UnionTest("456".toCharArray());

    public static final org.opendaylight.controller.config.api.JmxAttribute dtoCJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DtoC");
    private org.opendaylight.controller.config.yang.test.impl.DtoC dtoC;

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleLongJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleLong");
    private java.lang.Long simpleLong = new java.lang.Long("-45");

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleBooleanJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleBoolean");
    private java.lang.Boolean simpleBoolean = new java.lang.Boolean("false");

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleShortJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleShort");
    private java.lang.Short simpleShort = new java.lang.Short("45");

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleBigIntegerJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleBigInteger");
    private java.math.BigInteger simpleBigInteger = new java.math.BigInteger("545454");

    public static final org.opendaylight.controller.config.api.JmxAttribute peersJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Peers");
    private java.util.List<org.opendaylight.controller.config.yang.test.impl.Peers> peers = new java.util.ArrayList<org.opendaylight.controller.config.yang.test.impl.Peers>();

    public static final org.opendaylight.controller.config.api.JmxAttribute simpleByteJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SimpleByte");
    private java.lang.Byte simpleByte = new java.lang.Byte("-4");

    public static final org.opendaylight.controller.config.api.JmxAttribute testingDepJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("TestingDep");
    private javax.management.ObjectName testingDep; // mandatory

    //attributes end

    private final AbstractNetconfTestImplModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractNetconfTestImplModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractNetconfTestImplModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractNetconfTestImplModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    private org.opendaylight.controller.config.yang.test.impl.NetconfTestImplRuntimeRegistrator rootRuntimeBeanRegistratorWrapper;

    public org.opendaylight.controller.config.yang.test.impl.NetconfTestImplRuntimeRegistrator getRootRuntimeBeanRegistratorWrapper(){
        return rootRuntimeBeanRegistratorWrapper;
    }

    @Override
    public void setRuntimeBeanRegistrator(org.opendaylight.controller.config.api.runtime.RootRuntimeBeanRegistrator rootRuntimeRegistrator){
        this.rootRuntimeBeanRegistratorWrapper = new org.opendaylight.controller.config.yang.test.impl.NetconfTestImplRuntimeRegistrator(rootRuntimeRegistrator);
    }

    @Override
    public void validate() {
        for(javax.management.ObjectName dep : testingDeps) {
            dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface.class, dep, testingDepsJmxAttribute);
        }
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface.class, testingDep, testingDepJmxAttribute);
        customValidation();
    }

    protected void customValidation() {
    }

    private java.util.List<java.lang.AutoCloseable> testingDepsDependency = new java.util.ArrayList<java.lang.AutoCloseable>();protected final java.util.List<java.lang.AutoCloseable> getTestingDepsDependency(){
        return testingDepsDependency;
    }
    private java.lang.AutoCloseable testingDepDependency;
    protected final java.lang.AutoCloseable getTestingDepDependency(){
        return testingDepDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            testingDepsDependency = new java.util.ArrayList<java.lang.AutoCloseable>();
            for(javax.management.ObjectName dep : testingDeps) {
                testingDepsDependency.add(dependencyResolver.resolveInstance(java.lang.AutoCloseable.class, dep, testingDepsJmxAttribute));
            }
            testingDepDependency = dependencyResolver.resolveInstance(java.lang.AutoCloseable.class, testingDep, testingDepJmxAttribute);
            if (complexList!=null){
                for(org.opendaylight.controller.config.yang.test.impl.ComplexList candidate : complexList) {
                    candidate.injectDependencyResolver(dependencyResolver);
                }
            }
            if (dtoD!=null){
                dtoD.injectDependencyResolver(dependencyResolver);
            }
            if (dtoC!=null){
                dtoC.injectDependencyResolver(dependencyResolver);
            }
            if (peers!=null){
                for(org.opendaylight.controller.config.yang.test.impl.Peers candidate : peers) {
                    candidate.injectDependencyResolver(dependencyResolver);
                }
            }
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractNetconfTestImplModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractNetconfTestImplModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (java.util.Objects.deepEquals(simpleLong2, other.simpleLong2) == false) {
            return false;
        }
        if (testingDepsDependency.equals(other.testingDepsDependency) == false) {
            return false;
        }
        for (int idx = 0; idx < testingDepsDependency.size(); idx++) {
            if (testingDepsDependency.get(idx) != other.testingDepsDependency.get(idx)) {
                return false;
            }
        }
        if (java.util.Objects.deepEquals(binaryLeaf, other.binaryLeaf) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(complexList, other.complexList) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(extended, other.extended) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleInt, other.simpleInt) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(extendedEnum, other.extendedEnum) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(type, other.type) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleList, other.simpleList) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(extendedTwice, other.extendedTwice) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(sleepFactor, other.sleepFactor) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(dtoD, other.dtoD) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleTest, other.simpleTest) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(ip, other.ip) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(unionTestAttr, other.unionTestAttr) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(dtoC, other.dtoC) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleLong, other.simpleLong) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleBoolean, other.simpleBoolean) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleShort, other.simpleShort) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleBigInteger, other.simpleBigInteger) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(peers, other.peers) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(simpleByte, other.simpleByte) == false) {
            return false;
        }
        if (testingDepDependency != other.testingDepDependency) { // reference to dependency must be same
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractNetconfTestImplModule that = (AbstractNetconfTestImplModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.lang.Long getSimpleLong2() {
        return simpleLong2;
    }

    @Override
    public void setSimpleLong2(java.lang.Long simpleLong2) {
        this.simpleLong2 = simpleLong2;
    }

    @Override
    public java.util.List<javax.management.ObjectName> getTestingDeps() {
        return testingDeps;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface.class)
    public void setTestingDeps(java.util.List<javax.management.ObjectName> testingDeps) {
        if (testingDeps == null) throw new IllegalArgumentException("Null not supported");
        this.testingDeps = testingDeps;
    }

    @Override
    public byte[] getBinaryLeaf() {
        return binaryLeaf;
    }

    @Override
    public void setBinaryLeaf(byte[] binaryLeaf) {
        this.binaryLeaf = binaryLeaf;
    }

    @Override
    public java.util.List<org.opendaylight.controller.config.yang.test.impl.ComplexList> getComplexList() {
        return complexList;
    }

    @Override
    public void setComplexList(java.util.List<org.opendaylight.controller.config.yang.test.impl.ComplexList> complexList) {
        this.complexList = complexList;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendOnce getExtended() {
        return extended;
    }

    @Override
    public void setExtended(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendOnce extended) {
        this.extended = extended;
    }

    @Override
    public java.lang.Long getSimpleInt() {
        return simpleInt;
    }

    @Override
    public void setSimpleInt(java.lang.Long simpleInt) {
        this.simpleInt = simpleInt;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendEnum getExtendedEnum() {
        return extendedEnum;
    }

    @Override
    public void setExtendedEnum(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendEnum extendedEnum) {
        this.extendedEnum = extendedEnum;
    }

    @Override
    public java.lang.String getType() {
        return type;
    }

    @Override
    public void setType(java.lang.String type) {
        this.type = type;
    }

    @Override
    public java.util.List<java.lang.Integer> getSimpleList() {
        return simpleList;
    }

    @Override
    public void setSimpleList(java.util.List<java.lang.Integer> simpleList) {
        this.simpleList = simpleList;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendTwice getExtendedTwice() {
        return extendedTwice;
    }

    @Override
    public void setExtendedTwice(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.ExtendTwice extendedTwice) {
        this.extendedTwice = extendedTwice;
    }

    @Override
    public java.math.BigDecimal getSleepFactor() {
        return sleepFactor;
    }

    @Override
    public void setSleepFactor(java.math.BigDecimal sleepFactor) {
        this.sleepFactor = sleepFactor;
    }

    @Override
    public org.opendaylight.controller.config.yang.test.impl.DtoD getDtoD() {
        return dtoD;
    }

    @Override
    public void setDtoD(org.opendaylight.controller.config.yang.test.impl.DtoD dtoD) {
        this.dtoD = dtoD;
    }

    @Override
    public java.lang.Integer getSimpleTest() {
        return simpleTest;
    }

    @Override
    public void setSimpleTest(java.lang.Integer simpleTest) {
        this.simpleTest = simpleTest;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress getIp() {
        return ip;
    }

    @Override
    public void setIp(org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress ip) {
        this.ip = ip;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.UnionTest getUnionTestAttr() {
        return unionTestAttr;
    }

    @Override
    public void setUnionTestAttr(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.controller.config.test.types.rev131127.UnionTest unionTestAttr) {
        this.unionTestAttr = unionTestAttr;
    }

    @Override
    public org.opendaylight.controller.config.yang.test.impl.DtoC getDtoC() {
        return dtoC;
    }

    @Override
    public void setDtoC(org.opendaylight.controller.config.yang.test.impl.DtoC dtoC) {
        this.dtoC = dtoC;
    }

    @Override
    public java.lang.Long getSimpleLong() {
        return simpleLong;
    }

    @Override
    public void setSimpleLong(java.lang.Long simpleLong) {
        this.simpleLong = simpleLong;
    }

    @Override
    public java.lang.Boolean getSimpleBoolean() {
        return simpleBoolean;
    }

    @Override
    public void setSimpleBoolean(java.lang.Boolean simpleBoolean) {
        this.simpleBoolean = simpleBoolean;
    }

    @Override
    public java.lang.Short getSimpleShort() {
        return simpleShort;
    }

    @Override
    public void setSimpleShort(java.lang.Short simpleShort) {
        this.simpleShort = simpleShort;
    }

    @Override
    public java.math.BigInteger getSimpleBigInteger() {
        return simpleBigInteger;
    }

    @Override
    public void setSimpleBigInteger(java.math.BigInteger simpleBigInteger) {
        this.simpleBigInteger = simpleBigInteger;
    }

    @Override
    public java.util.List<org.opendaylight.controller.config.yang.test.impl.Peers> getPeers() {
        return peers;
    }

    @Override
    public void setPeers(java.util.List<org.opendaylight.controller.config.yang.test.impl.Peers> peers) {
        this.peers = peers;
    }

    @Override
    public java.lang.Byte getSimpleByte() {
        return simpleByte;
    }

    @Override
    public void setSimpleByte(java.lang.Byte simpleByte) {
        this.simpleByte = simpleByte;
    }

    @Override
    public javax.management.ObjectName getTestingDep() {
        return testingDep;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface.class)
    public void setTestingDep(javax.management.ObjectName testingDep) {
        this.testingDep = testingDep;
    }

}
