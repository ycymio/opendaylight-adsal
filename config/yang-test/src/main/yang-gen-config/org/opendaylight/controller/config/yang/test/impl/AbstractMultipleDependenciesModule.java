/*
* Generated file
*
* Generated from: yang module name: config-test-impl yang module local name: multiple-dependencies
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat Aug 08 09:41:27 CST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.test.impl;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2013-04-03", name = "config-test-impl", namespace = "urn:opendaylight:params:xml:ns:yang:controller:test:impl")

public abstract class AbstractMultipleDependenciesModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.test.impl.MultipleDependenciesModuleMXBean,org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.test.impl.AbstractMultipleDependenciesModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute testingDepsJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("TestingDeps");
    private java.util.List<javax.management.ObjectName> testingDeps = new java.util.ArrayList<javax.management.ObjectName>(); // mandatory

    //attributes end

    private final AbstractMultipleDependenciesModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractMultipleDependenciesModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractMultipleDependenciesModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractMultipleDependenciesModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    @Override
    public void validate() {
        for(javax.management.ObjectName dep : testingDeps) {
            dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface.class, dep, testingDepsJmxAttribute);
        }

        customValidation();
    }

    protected void customValidation() {
    }

    private java.util.List<java.lang.AutoCloseable> testingDepsDependency = new java.util.ArrayList<java.lang.AutoCloseable>();protected final java.util.List<java.lang.AutoCloseable> getTestingDepsDependency(){
        return testingDepsDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            testingDepsDependency = new java.util.ArrayList<java.lang.AutoCloseable>();
            for(javax.management.ObjectName dep : testingDeps) {
                testingDepsDependency.add(dependencyResolver.resolveInstance(java.lang.AutoCloseable.class, dep, testingDepsJmxAttribute));
            }
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractMultipleDependenciesModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractMultipleDependenciesModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (testingDepsDependency.equals(other.testingDepsDependency) == false) {
            return false;
        }
        for (int idx = 0; idx < testingDepsDependency.size(); idx++) {
            if (testingDepsDependency.get(idx) != other.testingDepsDependency.get(idx)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractMultipleDependenciesModule that = (AbstractMultipleDependenciesModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.util.List<javax.management.ObjectName> getTestingDeps() {
        return testingDeps;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.test.AutoCloseableServiceInterface.class)
    public void setTestingDeps(java.util.List<javax.management.ObjectName> testingDeps) {
        if (testingDeps == null) throw new IllegalArgumentException("Null not supported");
        this.testingDeps = testingDeps;
    }

}
