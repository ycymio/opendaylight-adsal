/*
* Generated file
*
* Generated from: yang module name: protocol-framework yang module local name: timed-reconnect-strategy-factory
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat May 16 20:48:51 CST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.protocol.framework;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2014-03-13", name = "protocol-framework", namespace = "urn:opendaylight:params:xml:ns:yang:controller:protocol:framework")

public abstract class AbstractTimedReconnectStrategyFactoryModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModuleMXBean,org.opendaylight.controller.config.yang.protocol.framework.ReconnectStrategyFactoryServiceInterface {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.protocol.framework.AbstractTimedReconnectStrategyFactoryModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute connectTimeJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("ConnectTime");
    private java.lang.Integer connectTime;

    public static final org.opendaylight.controller.config.api.JmxAttribute maxSleepJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("MaxSleep");
    private java.lang.Long maxSleep;

    public static final org.opendaylight.controller.config.api.JmxAttribute minSleepJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("MinSleep");
    private java.lang.Long minSleep;

    public static final org.opendaylight.controller.config.api.JmxAttribute timedReconnectExecutorJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("TimedReconnectExecutor");
    private javax.management.ObjectName timedReconnectExecutor; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute maxAttemptsJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("MaxAttempts");
    private java.lang.Long maxAttempts;

    public static final org.opendaylight.controller.config.api.JmxAttribute sleepFactorJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SleepFactor");
    private java.math.BigDecimal sleepFactor;

    public static final org.opendaylight.controller.config.api.JmxAttribute deadlineJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Deadline");
    private java.lang.Long deadline;

    //attributes end

    private final AbstractTimedReconnectStrategyFactoryModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractTimedReconnectStrategyFactoryModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractTimedReconnectStrategyFactoryModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractTimedReconnectStrategyFactoryModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    @Override
    public void validate() {
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.netty.EventExecutorServiceInterface.class, timedReconnectExecutor, timedReconnectExecutorJmxAttribute);
        customValidation();
    }

    protected void customValidation() {
    }

    private io.netty.util.concurrent.EventExecutor timedReconnectExecutorDependency;
    protected final io.netty.util.concurrent.EventExecutor getTimedReconnectExecutorDependency(){
        return timedReconnectExecutorDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            timedReconnectExecutorDependency = dependencyResolver.resolveInstance(io.netty.util.concurrent.EventExecutor.class, timedReconnectExecutor, timedReconnectExecutorJmxAttribute);
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractTimedReconnectStrategyFactoryModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractTimedReconnectStrategyFactoryModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (java.util.Objects.deepEquals(connectTime, other.connectTime) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(maxSleep, other.maxSleep) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(minSleep, other.minSleep) == false) {
            return false;
        }
        if (timedReconnectExecutorDependency != other.timedReconnectExecutorDependency) { // reference to dependency must be same
            return false;
        }
        if (java.util.Objects.deepEquals(maxAttempts, other.maxAttempts) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(sleepFactor, other.sleepFactor) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(deadline, other.deadline) == false) {
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractTimedReconnectStrategyFactoryModule that = (AbstractTimedReconnectStrategyFactoryModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.lang.Integer getConnectTime() {
        return connectTime;
    }

    @Override
    public void setConnectTime(java.lang.Integer connectTime) {
        this.connectTime = connectTime;
    }

    @Override
    public java.lang.Long getMaxSleep() {
        return maxSleep;
    }

    @Override
    public void setMaxSleep(java.lang.Long maxSleep) {
        this.maxSleep = maxSleep;
    }

    @Override
    public java.lang.Long getMinSleep() {
        return minSleep;
    }

    @Override
    public void setMinSleep(java.lang.Long minSleep) {
        this.minSleep = minSleep;
    }

    @Override
    public javax.management.ObjectName getTimedReconnectExecutor() {
        return timedReconnectExecutor;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.netty.EventExecutorServiceInterface.class)
    public void setTimedReconnectExecutor(javax.management.ObjectName timedReconnectExecutor) {
        this.timedReconnectExecutor = timedReconnectExecutor;
    }

    @Override
    public java.lang.Long getMaxAttempts() {
        return maxAttempts;
    }

    @Override
    public void setMaxAttempts(java.lang.Long maxAttempts) {
        this.maxAttempts = maxAttempts;
    }

    @Override
    public java.math.BigDecimal getSleepFactor() {
        return sleepFactor;
    }

    @Override
    public void setSleepFactor(java.math.BigDecimal sleepFactor) {
        this.sleepFactor = sleepFactor;
    }

    @Override
    public java.lang.Long getDeadline() {
        return deadline;
    }

    @Override
    public void setDeadline(java.lang.Long deadline) {
        this.deadline = deadline;
    }

}
