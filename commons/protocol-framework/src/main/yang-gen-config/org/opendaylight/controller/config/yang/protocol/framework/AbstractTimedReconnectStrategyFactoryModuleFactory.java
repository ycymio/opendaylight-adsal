/*
* Generated file
*
* Generated from: yang module name: protocol-framework yang module local name: timed-reconnect-strategy-factory
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat May 16 20:48:51 CST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.protocol.framework;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2014-03-13", name = "protocol-framework", namespace = "urn:opendaylight:params:xml:ns:yang:controller:protocol:framework")

public abstract class AbstractTimedReconnectStrategyFactoryModuleFactory implements org.opendaylight.controller.config.spi.ModuleFactory {
    public static final java.lang.String NAME = "timed-reconnect-strategy-factory";

    private static final java.util.Set<Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface>> serviceIfcs;

    @Override
    public final String getImplementationName() {
        return NAME;
    }

    static {
        java.util.Set<Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface>> serviceIfcs2 = new java.util.HashSet<Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface>>();
        serviceIfcs2.add(org.opendaylight.controller.config.yang.protocol.framework.ReconnectStrategyFactoryServiceInterface.class);
        serviceIfcs = java.util.Collections.unmodifiableSet(serviceIfcs2);
    }

    @Override
    public final boolean isModuleImplementingServiceInterface(Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface> serviceInterface) {
        for (Class<?> ifc: serviceIfcs) {
            if (serviceInterface.isAssignableFrom(ifc)){
                return true;
            }
        }
        return false;
    }

    @Override
    public java.util.Set<Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface>> getImplementedServiceIntefaces() {
        return serviceIfcs;
    }

    @Override
    public org.opendaylight.controller.config.spi.Module createModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.osgi.framework.BundleContext bundleContext) {
        return instantiateModule(instanceName, dependencyResolver, bundleContext);
    }

    @Override
    public org.opendaylight.controller.config.spi.Module createModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.opendaylight.controller.config.api.DynamicMBeanWithInstance old, org.osgi.framework.BundleContext bundleContext) throws Exception {
        org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule oldModule = null;
        try {
            oldModule = (org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule) old.getModule();
        } catch(Exception e) {
            return handleChangedClass(old);
        }
        org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule module = instantiateModule(instanceName, dependencyResolver, oldModule, old.getInstance(), bundleContext);
        module.setConnectTime(oldModule.getConnectTime());
        module.setMaxSleep(oldModule.getMaxSleep());
        module.setMinSleep(oldModule.getMinSleep());
        module.setTimedReconnectExecutor(oldModule.getTimedReconnectExecutor());
        module.setMaxAttempts(oldModule.getMaxAttempts());
        module.setSleepFactor(oldModule.getSleepFactor());
        module.setDeadline(oldModule.getDeadline());

        return module;
    }

    public org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule instantiateModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule oldModule, java.lang.AutoCloseable oldInstance, org.osgi.framework.BundleContext bundleContext) {
        return new org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule(new org.opendaylight.controller.config.api.ModuleIdentifier(NAME, instanceName), dependencyResolver, oldModule, oldInstance);
    }

    public org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule instantiateModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.osgi.framework.BundleContext bundleContext) {
        return new org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule(new org.opendaylight.controller.config.api.ModuleIdentifier(NAME, instanceName), dependencyResolver);
    }

    public org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule handleChangedClass(org.opendaylight.controller.config.api.DynamicMBeanWithInstance old) throws Exception {
        throw new UnsupportedOperationException("Class reloading is not supported");
    }

    @Override
    public java.util.Set<org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule> getDefaultModules(org.opendaylight.controller.config.api.DependencyResolverFactory dependencyResolverFactory, org.osgi.framework.BundleContext bundleContext) {
        return new java.util.HashSet<org.opendaylight.controller.config.yang.protocol.framework.TimedReconnectStrategyFactoryModule>();
    }

}
