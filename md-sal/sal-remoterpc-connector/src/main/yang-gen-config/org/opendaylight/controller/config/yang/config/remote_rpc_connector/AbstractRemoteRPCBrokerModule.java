/*
* Generated file
*
* Generated from: yang module name: remote-rpc-connector yang module local name: remote-rpc-connector
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat Aug 08 09:39:17 CST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.config.remote_rpc_connector;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2014-07-07", name = "remote-rpc-connector", namespace = "urn:opendaylight:params:xml:ns:yang:controller:config:remote-rpc-connector")

public abstract class AbstractRemoteRPCBrokerModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.config.remote_rpc_connector.RemoteRPCBrokerModuleMXBean {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.config.remote_rpc_connector.AbstractRemoteRPCBrokerModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute actorSystemNameJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("ActorSystemName");
    private java.lang.String actorSystemName = "odl-cluster-rpc";

    public static final org.opendaylight.controller.config.api.JmxAttribute enableMetricCaptureJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("EnableMetricCapture");
    private java.lang.Boolean enableMetricCapture = new java.lang.Boolean("false");

    public static final org.opendaylight.controller.config.api.JmxAttribute domBrokerJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DomBroker");
    private javax.management.ObjectName domBroker; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute boundedMailboxCapacityJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BoundedMailboxCapacity");
    private java.lang.Integer boundedMailboxCapacity = new java.lang.Integer("1000");

    //attributes end

    private final AbstractRemoteRPCBrokerModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractRemoteRPCBrokerModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractRemoteRPCBrokerModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractRemoteRPCBrokerModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    @Override
    public void validate() {
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.dom.BrokerServiceInterface.class, domBroker, domBrokerJmxAttribute);
        customValidation();
    }

    protected void customValidation() {
    }

    private org.opendaylight.controller.sal.core.api.Broker domBrokerDependency;
    protected final org.opendaylight.controller.sal.core.api.Broker getDomBrokerDependency(){
        return domBrokerDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            domBrokerDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.sal.core.api.Broker.class, domBroker, domBrokerJmxAttribute);
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractRemoteRPCBrokerModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractRemoteRPCBrokerModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (java.util.Objects.deepEquals(actorSystemName, other.actorSystemName) == false) {
            return false;
        }
        if (java.util.Objects.deepEquals(enableMetricCapture, other.enableMetricCapture) == false) {
            return false;
        }
        if (domBrokerDependency != other.domBrokerDependency) { // reference to dependency must be same
            return false;
        }
        if (java.util.Objects.deepEquals(boundedMailboxCapacity, other.boundedMailboxCapacity) == false) {
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractRemoteRPCBrokerModule that = (AbstractRemoteRPCBrokerModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.lang.String getActorSystemName() {
        return actorSystemName;
    }

    /**
    * Name by which actor system is identified. Its also used to find relevant configuration
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Name by which actor system is identified. Its also used to find relevant configuration")
    public void setActorSystemName(java.lang.String actorSystemName) {
        this.actorSystemName = actorSystemName;
    }

    @Override
    public java.lang.Boolean getEnableMetricCapture() {
        return enableMetricCapture;
    }

    /**
    * Enable or disable metric capture.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Enable or disable metric capture.")
    public void setEnableMetricCapture(java.lang.Boolean enableMetricCapture) {
        this.enableMetricCapture = enableMetricCapture;
    }

    @Override
    public javax.management.ObjectName getDomBroker() {
        return domBroker;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.dom.BrokerServiceInterface.class)
    public void setDomBroker(javax.management.ObjectName domBroker) {
        this.domBroker = domBroker;
    }

    @Override
    public java.lang.Integer getBoundedMailboxCapacity() {
        return boundedMailboxCapacity;
    }

    /**
    * Max queue size that an actor's mailbox can reach
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Max queue size that an actor's mailbox can reach")
    public void setBoundedMailboxCapacity(java.lang.Integer boundedMailboxCapacity) {
        this.boundedMailboxCapacity = boundedMailboxCapacity;
    }

}
